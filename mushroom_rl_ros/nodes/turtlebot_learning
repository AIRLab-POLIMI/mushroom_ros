#!/usr/bin/env python3

import numpy as np

from mushroom_rl_ros.environments import TurtlebotGazebo

from mushroom_rl.core import Core, Logger
from mushroom_rl.algorithms.policy_search import REINFORCE
from mushroom_rl.approximators.parametric import LinearApproximator
from mushroom_rl.approximators.regressor import Regressor
from mushroom_rl.features.features import Features
from mushroom_rl.features.tensors import GaussianRBFTensor
from mushroom_rl.policy import GaussianPolicy
from mushroom_rl.utils.optimizers import AdaptiveOptimizer
from mushroom_rl.utils.dataset import compute_J


def experiment(n_runs, n_iterations, ep_per_run):
    logger = Logger('TurtleBot', results_dir=None)
    logger.strong_line()
    logger.info('Running Turtlebot experiment on Gazebo')

    # Environment
    mdp = TurtlebotGazebo()

    # Policy
    tensor_list = GaussianRBFTensor.generate([10, 10, 6],
                                             mdp.info.observation_space.low,
                                             mdp.info.observation_space.high)

    phi = Features(tensor_list=tensor_list)


    input_shape = (phi.size,)

    approximator = Regressor(LinearApproximator, input_shape=input_shape,
                             output_shape=mdp.info.action_space.shape)

    sigma = np.eye(2)*1e-1
    policy = GaussianPolicy(mu=approximator, sigma=sigma)


    # Agent
    optimizer = AdaptiveOptimizer(5)
    agent = REINFORCE(mdp.info, policy, optimizer, phi)

    logger.info('Experiment Algorithm: ' + agent.__class__.__name__)

    # Train
    core = Core(agent, mdp)
    dataset_eval = core.evaluate(n_episodes=ep_per_run)
    J = compute_J(dataset_eval, gamma=mdp.info.gamma)
    logger.epoch_info(0, J=np.mean(J))

    for i in range(n_runs):
        core.learn(n_episodes=n_iterations * ep_per_run,
                   n_episodes_per_fit=ep_per_run)
        dataset_eval = core.evaluate(n_episodes=ep_per_run)
        J = compute_J(dataset_eval, gamma=mdp.info.gamma)
        logger.epoch_info(i+1, J=np.mean(J))

    mdp.stop()


if __name__ == '__main__':
    experiment(n_runs=4, n_iterations=10, ep_per_run=3)